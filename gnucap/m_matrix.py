# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_m_matrix')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_m_matrix')
    _m_matrix = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_m_matrix', [dirname(__file__)])
        except ImportError:
            import _m_matrix
            return _m_matrix
        try:
            _mod = imp.load_module('_m_matrix', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _m_matrix = swig_import_helper()
    del swig_import_helper
else:
    import _m_matrix
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _m_matrix.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _m_matrix.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _m_matrix.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _m_matrix.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _m_matrix.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _m_matrix.SwigPyIterator_equal(self, x)

    def copy(self):
        return _m_matrix.SwigPyIterator_copy(self)

    def next(self):
        return _m_matrix.SwigPyIterator_next(self)

    def __next__(self):
        return _m_matrix.SwigPyIterator___next__(self)

    def previous(self):
        return _m_matrix.SwigPyIterator_previous(self)

    def advance(self, n):
        return _m_matrix.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _m_matrix.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _m_matrix.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _m_matrix.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _m_matrix.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _m_matrix.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _m_matrix.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _m_matrix.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

BUFLEN = _m_matrix.BUFLEN
BIGBUFLEN = _m_matrix.BIGBUFLEN
I_PROMPT = _m_matrix.I_PROMPT
CKT_PROMPT = _m_matrix.CKT_PROMPT
ANTI_COMMENT = _m_matrix.ANTI_COMMENT
ENDDIR = _m_matrix.ENDDIR
PATHSEP = _m_matrix.PATHSEP
STEPFILE = _m_matrix.STEPFILE
rPRE_MAIN = _m_matrix.rPRE_MAIN
rPRESET = _m_matrix.rPRESET
rINTERACTIVE = _m_matrix.rINTERACTIVE
rSCRIPT = _m_matrix.rSCRIPT
rBATCH = _m_matrix.rBATCH
class ENV(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ENV, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ENV, name)
    __repr__ = _swig_repr
    __swig_setmethods__["run_mode"] = _m_matrix.ENV_run_mode_set
    __swig_getmethods__["run_mode"] = _m_matrix.ENV_run_mode_get
    if _newclass:
        run_mode = _swig_property(_m_matrix.ENV_run_mode_get, _m_matrix.ENV_run_mode_set)

    def __init__(self):
        this = _m_matrix.new_ENV()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _m_matrix.delete_ENV
    __del__ = lambda self: None
ENV_swigregister = _m_matrix.ENV_swigregister
ENV_swigregister(ENV)
cvar = _m_matrix.cvar

class COMPLEX_array_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COMPLEX_array_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COMPLEX_array_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_t"] = _m_matrix.COMPLEX_array_t__t_set
    __swig_getmethods__["_t"] = _m_matrix.COMPLEX_array_t__t_get
    if _newclass:
        _t = _swig_property(_m_matrix.COMPLEX_array_t__t_get, _m_matrix.COMPLEX_array_t__t_set)

    def __getitem__(self, i):
        return _m_matrix.COMPLEX_array_t___getitem__(self, i)

    def __init__(self):
        this = _m_matrix.new_COMPLEX_array_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _m_matrix.delete_COMPLEX_array_t
    __del__ = lambda self: None
COMPLEX_array_t_swigregister = _m_matrix.COMPLEX_array_t_swigregister
COMPLEX_array_t_swigregister(COMPLEX_array_t)

class BSMATRIXd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BSMATRIXd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BSMATRIXd, name)
    __repr__ = _swig_repr

    def __init__(self, ss=0):
        this = _m_matrix.new_BSMATRIXd(ss)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def iwant(self, arg2, arg3):
        return _m_matrix.BSMATRIXd_iwant(self, arg2, arg3)

    def unallocate(self):
        return _m_matrix.BSMATRIXd_unallocate(self)

    def allocate(self):
        return _m_matrix.BSMATRIXd_allocate(self)

    def reallocate(self):
        return _m_matrix.BSMATRIXd_reallocate(self)

    def size(self):
        return _m_matrix.BSMATRIXd_size(self)

    def density(self):
        return _m_matrix.BSMATRIXd_density(self)

    def zero(self):
        return _m_matrix.BSMATRIXd_zero(self)

    def dezero(self, o):
        return _m_matrix.BSMATRIXd_dezero(self, o)

    def load_diagonal_point(self, i, value):
        return _m_matrix.BSMATRIXd_load_diagonal_point(self, i, value)

    def load_point(self, i, j, value):
        return _m_matrix.BSMATRIXd_load_point(self, i, j, value)

    def load_couple(self, i, j, value):
        return _m_matrix.BSMATRIXd_load_couple(self, i, j, value)

    def load_symmetric(self, i, j, value):
        return _m_matrix.BSMATRIXd_load_symmetric(self, i, j, value)

    def load_asymmetric(self, r1, r2, c1, c2, value):
        return _m_matrix.BSMATRIXd_load_asymmetric(self, r1, r2, c1, c2, value)

    def lu_decomp(self, *args):
        return _m_matrix.BSMATRIXd_lu_decomp(self, *args)

    def fbsub(self, x, b, c=None):
        return _m_matrix.BSMATRIXd_fbsub(self, x, b, c)

    def d(self, r, arg3):
        return _m_matrix.BSMATRIXd_d(self, r, arg3)
    __swig_destroy__ = _m_matrix.delete_BSMATRIXd
    __del__ = lambda self: None
BSMATRIXd_swigregister = _m_matrix.BSMATRIXd_swigregister
BSMATRIXd_swigregister(BSMATRIXd)

class BSMATRIXc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BSMATRIXc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BSMATRIXc, name)

    def __init__(self, ss=0):
        this = _m_matrix.new_BSMATRIXc(ss)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def iwant(self, arg2, arg3):
        return _m_matrix.BSMATRIXc_iwant(self, arg2, arg3)

    def unallocate(self):
        return _m_matrix.BSMATRIXc_unallocate(self)

    def allocate(self):
        return _m_matrix.BSMATRIXc_allocate(self)

    def reallocate(self):
        return _m_matrix.BSMATRIXc_reallocate(self)

    def size(self):
        return _m_matrix.BSMATRIXc_size(self)

    def density(self):
        return _m_matrix.BSMATRIXc_density(self)

    def zero(self):
        return _m_matrix.BSMATRIXc_zero(self)

    def dezero(self, o):
        return _m_matrix.BSMATRIXc_dezero(self, o)

    def load_diagonal_point(self, i, value):
        return _m_matrix.BSMATRIXc_load_diagonal_point(self, i, value)

    def load_point(self, i, j, value):
        return _m_matrix.BSMATRIXc_load_point(self, i, j, value)

    def load_couple(self, i, j, value):
        return _m_matrix.BSMATRIXc_load_couple(self, i, j, value)

    def load_symmetric(self, i, j, value):
        return _m_matrix.BSMATRIXc_load_symmetric(self, i, j, value)

    def load_asymmetric(self, r1, r2, c1, c2, value):
        return _m_matrix.BSMATRIXc_load_asymmetric(self, r1, r2, c1, c2, value)

    def lu_decomp(self, *args):
        return _m_matrix.BSMATRIXc_lu_decomp(self, *args)

    def fbsub(self, x, b, c=None):
        return _m_matrix.BSMATRIXc_fbsub(self, x, b, c)

    def d(self, r, arg3):
        return _m_matrix.BSMATRIXc_d(self, r, arg3)

    def fbsub_(self, x):
        return _m_matrix.BSMATRIXc_fbsub_(self, x)

    def __repr__(self):
        return _m_matrix.BSMATRIXc___repr__(self)

    def __getitem__(self, p):
        return _m_matrix.BSMATRIXc___getitem__(self, p)
    __swig_destroy__ = _m_matrix.delete_BSMATRIXc
    __del__ = lambda self: None
BSMATRIXc_swigregister = _m_matrix.BSMATRIXc_swigregister
BSMATRIXc_swigregister(BSMATRIXc)

class BSCR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BSCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BSCR, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def __repr__(self):
        return _m_matrix.BSCR___repr__(self)

    def __getitem__(self, *args):
        return _m_matrix.BSCR___getitem__(self, *args)
    __swig_destroy__ = _m_matrix.delete_BSCR
    __del__ = lambda self: None
BSCR_swigregister = _m_matrix.BSCR_swigregister
BSCR_swigregister(BSCR)

# This file is compatible with both classic and new-style classes.


