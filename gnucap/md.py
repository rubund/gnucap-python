# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_md')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_md')
    _md = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_md', [dirname(__file__)])
        except ImportError:
            import _md
            return _md
        try:
            _mod = imp.load_module('_md', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _md = swig_import_helper()
    del swig_import_helper
else:
    import _md
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


BUFLEN = _md.BUFLEN
BIGBUFLEN = _md.BIGBUFLEN
I_PROMPT = _md.I_PROMPT
CKT_PROMPT = _md.CKT_PROMPT
ANTI_COMMENT = _md.ANTI_COMMENT
ENDDIR = _md.ENDDIR
PATHSEP = _md.PATHSEP
STEPFILE = _md.STEPFILE
rPRE_MAIN = _md.rPRE_MAIN
rPRESET = _md.rPRESET
rINTERACTIVE = _md.rINTERACTIVE
rSCRIPT = _md.rSCRIPT
rBATCH = _md.rBATCH
class ENV(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ENV, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ENV, name)
    __repr__ = _swig_repr
    __swig_setmethods__["run_mode"] = _md.ENV_run_mode_set
    __swig_getmethods__["run_mode"] = _md.ENV_run_mode_get
    if _newclass:
        run_mode = _swig_property(_md.ENV_run_mode_get, _md.ENV_run_mode_set)

    def __init__(self):
        this = _md.new_ENV()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _md.delete_ENV
    __del__ = lambda self: None
ENV_swigregister = _md.ENV_swigregister
ENV_swigregister(ENV)
cvar = _md.cvar

class COMPLEX_array_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COMPLEX_array_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COMPLEX_array_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_t"] = _md.COMPLEX_array_t__t_set
    __swig_getmethods__["_t"] = _md.COMPLEX_array_t__t_get
    if _newclass:
        _t = _swig_property(_md.COMPLEX_array_t__t_get, _md.COMPLEX_array_t__t_set)

    def __getitem__(self, i):
        return _md.COMPLEX_array_t___getitem__(self, i)

    def __init__(self):
        this = _md.new_COMPLEX_array_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _md.delete_COMPLEX_array_t
    __del__ = lambda self: None
COMPLEX_array_t_swigregister = _md.COMPLEX_array_t_swigregister
COMPLEX_array_t_swigregister(COMPLEX_array_t)

# This file is compatible with both classic and new-style classes.


