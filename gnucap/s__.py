# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_s__')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_s__')
    _s__ = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_s__', [dirname(__file__)])
        except ImportError:
            import _s__
            return _s__
        try:
            _mod = imp.load_module('_s__', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _s__ = swig_import_helper()
    del swig_import_helper
else:
    import _s__
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


BUFLEN = _s__.BUFLEN
BIGBUFLEN = _s__.BIGBUFLEN
I_PROMPT = _s__.I_PROMPT
CKT_PROMPT = _s__.CKT_PROMPT
ANTI_COMMENT = _s__.ANTI_COMMENT
ENDDIR = _s__.ENDDIR
PATHSEP = _s__.PATHSEP
STEPFILE = _s__.STEPFILE
rPRE_MAIN = _s__.rPRE_MAIN
rPRESET = _s__.rPRESET
rINTERACTIVE = _s__.rINTERACTIVE
rSCRIPT = _s__.rSCRIPT
rBATCH = _s__.rBATCH
class ENV(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ENV, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ENV, name)
    __repr__ = _swig_repr
    __swig_setmethods__["run_mode"] = _s__.ENV_run_mode_set
    __swig_getmethods__["run_mode"] = _s__.ENV_run_mode_get
    if _newclass:
        run_mode = _swig_property(_s__.ENV_run_mode_get, _s__.ENV_run_mode_set)

    def __init__(self):
        this = _s__.new_ENV()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _s__.delete_ENV
    __del__ = lambda self: None
ENV_swigregister = _s__.ENV_swigregister
ENV_swigregister(ENV)
cvar = _s__.cvar

class COMPLEX_array_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COMPLEX_array_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COMPLEX_array_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_t"] = _s__.COMPLEX_array_t__t_set
    __swig_getmethods__["_t"] = _s__.COMPLEX_array_t__t_get
    if _newclass:
        _t = _swig_property(_s__.COMPLEX_array_t__t_get, _s__.COMPLEX_array_t__t_set)

    def __getitem__(self, i):
        return _s__.COMPLEX_array_t___getitem__(self, i)

    def __init__(self):
        this = _s__.new_COMPLEX_array_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _s__.delete_COMPLEX_array_t
    __del__ = lambda self: None
COMPLEX_array_t_swigregister = _s__.COMPLEX_array_t_swigregister
COMPLEX_array_t_swigregister(COMPLEX_array_t)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _s__.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _s__.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _s__.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _s__.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _s__.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _s__.SwigPyIterator_equal(self, x)

    def copy(self):
        return _s__.SwigPyIterator_copy(self)

    def next(self):
        return _s__.SwigPyIterator_next(self)

    def __next__(self):
        return _s__.SwigPyIterator___next__(self)

    def previous(self):
        return _s__.SwigPyIterator_previous(self)

    def advance(self, n):
        return _s__.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _s__.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _s__.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _s__.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _s__.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _s__.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _s__.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _s__.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class BSMATRIXd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BSMATRIXd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BSMATRIXd, name)
    __repr__ = _swig_repr

    def __init__(self, ss=0):
        this = _s__.new_BSMATRIXd(ss)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def iwant(self, arg2, arg3):
        return _s__.BSMATRIXd_iwant(self, arg2, arg3)

    def unallocate(self):
        return _s__.BSMATRIXd_unallocate(self)

    def allocate(self):
        return _s__.BSMATRIXd_allocate(self)

    def reallocate(self):
        return _s__.BSMATRIXd_reallocate(self)

    def size(self):
        return _s__.BSMATRIXd_size(self)

    def density(self):
        return _s__.BSMATRIXd_density(self)

    def zero(self):
        return _s__.BSMATRIXd_zero(self)

    def dezero(self, o):
        return _s__.BSMATRIXd_dezero(self, o)

    def load_diagonal_point(self, i, value):
        return _s__.BSMATRIXd_load_diagonal_point(self, i, value)

    def load_point(self, i, j, value):
        return _s__.BSMATRIXd_load_point(self, i, j, value)

    def load_couple(self, i, j, value):
        return _s__.BSMATRIXd_load_couple(self, i, j, value)

    def load_symmetric(self, i, j, value):
        return _s__.BSMATRIXd_load_symmetric(self, i, j, value)

    def load_asymmetric(self, r1, r2, c1, c2, value):
        return _s__.BSMATRIXd_load_asymmetric(self, r1, r2, c1, c2, value)

    def lu_decomp(self, *args):
        return _s__.BSMATRIXd_lu_decomp(self, *args)

    def fbsub(self, x, b, c=None):
        return _s__.BSMATRIXd_fbsub(self, x, b, c)

    def d(self, r, arg3):
        return _s__.BSMATRIXd_d(self, r, arg3)
    __swig_destroy__ = _s__.delete_BSMATRIXd
    __del__ = lambda self: None
BSMATRIXd_swigregister = _s__.BSMATRIXd_swigregister
BSMATRIXd_swigregister(BSMATRIXd)

class BSMATRIXc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BSMATRIXc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BSMATRIXc, name)

    def __init__(self, ss=0):
        this = _s__.new_BSMATRIXc(ss)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def iwant(self, arg2, arg3):
        return _s__.BSMATRIXc_iwant(self, arg2, arg3)

    def unallocate(self):
        return _s__.BSMATRIXc_unallocate(self)

    def allocate(self):
        return _s__.BSMATRIXc_allocate(self)

    def reallocate(self):
        return _s__.BSMATRIXc_reallocate(self)

    def size(self):
        return _s__.BSMATRIXc_size(self)

    def density(self):
        return _s__.BSMATRIXc_density(self)

    def zero(self):
        return _s__.BSMATRIXc_zero(self)

    def dezero(self, o):
        return _s__.BSMATRIXc_dezero(self, o)

    def load_diagonal_point(self, i, value):
        return _s__.BSMATRIXc_load_diagonal_point(self, i, value)

    def load_point(self, i, j, value):
        return _s__.BSMATRIXc_load_point(self, i, j, value)

    def load_couple(self, i, j, value):
        return _s__.BSMATRIXc_load_couple(self, i, j, value)

    def load_symmetric(self, i, j, value):
        return _s__.BSMATRIXc_load_symmetric(self, i, j, value)

    def load_asymmetric(self, r1, r2, c1, c2, value):
        return _s__.BSMATRIXc_load_asymmetric(self, r1, r2, c1, c2, value)

    def lu_decomp(self, *args):
        return _s__.BSMATRIXc_lu_decomp(self, *args)

    def fbsub(self, x, b, c=None):
        return _s__.BSMATRIXc_fbsub(self, x, b, c)

    def d(self, r, arg3):
        return _s__.BSMATRIXc_d(self, r, arg3)

    def fbsub_(self, x):
        return _s__.BSMATRIXc_fbsub_(self, x)

    def __repr__(self):
        return _s__.BSMATRIXc___repr__(self)

    def __getitem__(self, p):
        return _s__.BSMATRIXc___getitem__(self, p)
    __swig_destroy__ = _s__.delete_BSMATRIXc
    __del__ = lambda self: None
BSMATRIXc_swigregister = _s__.BSMATRIXc_swigregister
BSMATRIXc_swigregister(BSMATRIXc)

class BSCR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BSCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BSCR, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def __repr__(self):
        return _s__.BSCR___repr__(self)

    def __getitem__(self, *args):
        return _s__.BSCR___getitem__(self, *args)
    __swig_destroy__ = _s__.delete_BSCR
    __del__ = lambda self: None
BSCR_swigregister = _s__.BSCR_swigregister
BSCR_swigregister(BSCR)

class SIM_DATA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIM_DATA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIM_DATA, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["_user_nodes"] = _s__.SIM_DATA__user_nodes_set
    __swig_getmethods__["_user_nodes"] = _s__.SIM_DATA__user_nodes_get
    if _newclass:
        _user_nodes = _swig_property(_s__.SIM_DATA__user_nodes_get, _s__.SIM_DATA__user_nodes_set)
    __swig_setmethods__["_subckt_nodes"] = _s__.SIM_DATA__subckt_nodes_set
    __swig_getmethods__["_subckt_nodes"] = _s__.SIM_DATA__subckt_nodes_get
    if _newclass:
        _subckt_nodes = _swig_property(_s__.SIM_DATA__subckt_nodes_get, _s__.SIM_DATA__subckt_nodes_set)
    __swig_setmethods__["_model_nodes"] = _s__.SIM_DATA__model_nodes_set
    __swig_getmethods__["_model_nodes"] = _s__.SIM_DATA__model_nodes_get
    if _newclass:
        _model_nodes = _swig_property(_s__.SIM_DATA__model_nodes_get, _s__.SIM_DATA__model_nodes_set)
    __swig_setmethods__["_total_nodes"] = _s__.SIM_DATA__total_nodes_set
    __swig_getmethods__["_total_nodes"] = _s__.SIM_DATA__total_nodes_get
    if _newclass:
        _total_nodes = _swig_property(_s__.SIM_DATA__total_nodes_get, _s__.SIM_DATA__total_nodes_set)
    __swig_setmethods__["_iter"] = _s__.SIM_DATA__iter_set
    __swig_getmethods__["_iter"] = _s__.SIM_DATA__iter_get
    if _newclass:
        _iter = _swig_property(_s__.SIM_DATA__iter_get, _s__.SIM_DATA__iter_set)
    __swig_setmethods__["_jomega"] = _s__.SIM_DATA__jomega_set
    __swig_getmethods__["_jomega"] = _s__.SIM_DATA__jomega_get
    if _newclass:
        _jomega = _swig_property(_s__.SIM_DATA__jomega_get, _s__.SIM_DATA__jomega_set)
    __swig_setmethods__["_limiting"] = _s__.SIM_DATA__limiting_set
    __swig_getmethods__["_limiting"] = _s__.SIM_DATA__limiting_get
    if _newclass:
        _limiting = _swig_property(_s__.SIM_DATA__limiting_get, _s__.SIM_DATA__limiting_set)
    __swig_setmethods__["_vmax"] = _s__.SIM_DATA__vmax_set
    __swig_getmethods__["_vmax"] = _s__.SIM_DATA__vmax_get
    if _newclass:
        _vmax = _swig_property(_s__.SIM_DATA__vmax_get, _s__.SIM_DATA__vmax_set)
    __swig_setmethods__["_vmin"] = _s__.SIM_DATA__vmin_set
    __swig_getmethods__["_vmin"] = _s__.SIM_DATA__vmin_get
    if _newclass:
        _vmin = _swig_property(_s__.SIM_DATA__vmin_get, _s__.SIM_DATA__vmin_set)
    __swig_setmethods__["_uic"] = _s__.SIM_DATA__uic_set
    __swig_getmethods__["_uic"] = _s__.SIM_DATA__uic_get
    if _newclass:
        _uic = _swig_property(_s__.SIM_DATA__uic_get, _s__.SIM_DATA__uic_set)
    __swig_setmethods__["_inc_mode"] = _s__.SIM_DATA__inc_mode_set
    __swig_getmethods__["_inc_mode"] = _s__.SIM_DATA__inc_mode_get
    if _newclass:
        _inc_mode = _swig_property(_s__.SIM_DATA__inc_mode_get, _s__.SIM_DATA__inc_mode_set)
    __swig_setmethods__["_mode"] = _s__.SIM_DATA__mode_set
    __swig_getmethods__["_mode"] = _s__.SIM_DATA__mode_get
    if _newclass:
        _mode = _swig_property(_s__.SIM_DATA__mode_get, _s__.SIM_DATA__mode_set)
    __swig_setmethods__["_phase"] = _s__.SIM_DATA__phase_set
    __swig_getmethods__["_phase"] = _s__.SIM_DATA__phase_get
    if _newclass:
        _phase = _swig_property(_s__.SIM_DATA__phase_get, _s__.SIM_DATA__phase_set)
    __swig_setmethods__["_nm"] = _s__.SIM_DATA__nm_set
    __swig_getmethods__["_nm"] = _s__.SIM_DATA__nm_get
    if _newclass:
        _nm = _swig_property(_s__.SIM_DATA__nm_get, _s__.SIM_DATA__nm_set)
    __swig_setmethods__["_i"] = _s__.SIM_DATA__i_set
    __swig_getmethods__["_i"] = _s__.SIM_DATA__i_get
    if _newclass:
        _i = _swig_property(_s__.SIM_DATA__i_get, _s__.SIM_DATA__i_set)
    __swig_setmethods__["_v0"] = _s__.SIM_DATA__v0_set
    __swig_getmethods__["_v0"] = _s__.SIM_DATA__v0_get
    if _newclass:
        _v0 = _swig_property(_s__.SIM_DATA__v0_get, _s__.SIM_DATA__v0_set)
    __swig_setmethods__["_vt1"] = _s__.SIM_DATA__vt1_set
    __swig_getmethods__["_vt1"] = _s__.SIM_DATA__vt1_get
    if _newclass:
        _vt1 = _swig_property(_s__.SIM_DATA__vt1_get, _s__.SIM_DATA__vt1_set)
    __swig_setmethods__["_ac"] = _s__.SIM_DATA__ac_set
    __swig_getmethods__["_ac"] = _s__.SIM_DATA__ac_get
    if _newclass:
        _ac = _swig_property(_s__.SIM_DATA__ac_get, _s__.SIM_DATA__ac_set)
    __swig_setmethods__["_nstat"] = _s__.SIM_DATA__nstat_set
    __swig_getmethods__["_nstat"] = _s__.SIM_DATA__nstat_get
    if _newclass:
        _nstat = _swig_property(_s__.SIM_DATA__nstat_get, _s__.SIM_DATA__nstat_set)
    __swig_setmethods__["_vdc"] = _s__.SIM_DATA__vdc_set
    __swig_getmethods__["_vdc"] = _s__.SIM_DATA__vdc_get
    if _newclass:
        _vdc = _swig_property(_s__.SIM_DATA__vdc_get, _s__.SIM_DATA__vdc_set)
    __swig_setmethods__["_aa"] = _s__.SIM_DATA__aa_set
    __swig_getmethods__["_aa"] = _s__.SIM_DATA__aa_get
    if _newclass:
        _aa = _swig_property(_s__.SIM_DATA__aa_get, _s__.SIM_DATA__aa_set)
    __swig_setmethods__["_lu"] = _s__.SIM_DATA__lu_set
    __swig_getmethods__["_lu"] = _s__.SIM_DATA__lu_get
    if _newclass:
        _lu = _swig_property(_s__.SIM_DATA__lu_get, _s__.SIM_DATA__lu_set)
    __swig_setmethods__["_acx"] = _s__.SIM_DATA__acx_set
    __swig_getmethods__["_acx"] = _s__.SIM_DATA__acx_get
    if _newclass:
        _acx = _swig_property(_s__.SIM_DATA__acx_get, _s__.SIM_DATA__acx_set)

    def is_first_expand(self):
        return _s__.SIM_DATA_is_first_expand(self)

    def alloc_hold_vectors(self):
        return _s__.SIM_DATA_alloc_hold_vectors(self)

    def alloc_vectors(self):
        return _s__.SIM_DATA_alloc_vectors(self)

    def unalloc_vectors(self):
        return _s__.SIM_DATA_unalloc_vectors(self)

    def uninit(self):
        return _s__.SIM_DATA_uninit(self)

    def init(self):
        return _s__.SIM_DATA_init(self)

    def set_command_none(self):
        return _s__.SIM_DATA_set_command_none(self)

    def set_command_ac(self):
        return _s__.SIM_DATA_set_command_ac(self)

    def set_command_dc(self):
        return _s__.SIM_DATA_set_command_dc(self)

    def set_command_op(self):
        return _s__.SIM_DATA_set_command_op(self)

    def set_command_tran(self):
        return _s__.SIM_DATA_set_command_tran(self)

    def set_command_fourier(self):
        return _s__.SIM_DATA_set_command_fourier(self)

    def sim_mode(self):
        return _s__.SIM_DATA_sim_mode(self)

    def command_is_ac(self):
        return _s__.SIM_DATA_command_is_ac(self)

    def command_is_dc(self):
        return _s__.SIM_DATA_command_is_dc(self)

    def command_is_op(self):
        return _s__.SIM_DATA_command_is_op(self)

    def analysis_is_ac(self):
        return _s__.SIM_DATA_analysis_is_ac(self)

    def analysis_is_dcop(self):
        return _s__.SIM_DATA_analysis_is_dcop(self)

    def analysis_is_static(self):
        return _s__.SIM_DATA_analysis_is_static(self)

    def analysis_is_restore(self):
        return _s__.SIM_DATA_analysis_is_restore(self)

    def analysis_is_tran(self):
        return _s__.SIM_DATA_analysis_is_tran(self)

    def analysis_is_tran_static(self):
        return _s__.SIM_DATA_analysis_is_tran_static(self)

    def analysis_is_tran_restore(self):
        return _s__.SIM_DATA_analysis_is_tran_restore(self)

    def analysis_is_tran_dynamic(self):
        return _s__.SIM_DATA_analysis_is_tran_dynamic(self)
    __swig_destroy__ = _s__.delete_SIM_DATA
    __del__ = lambda self: None
SIM_DATA_swigregister = _s__.SIM_DATA_swigregister
SIM_DATA_swigregister(SIM_DATA)

class PairDeque(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDeque, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDeque, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _s__.PairDeque_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _s__.PairDeque___nonzero__(self)

    def __bool__(self):
        return _s__.PairDeque___bool__(self)

    def __len__(self):
        return _s__.PairDeque___len__(self)

    def __getslice__(self, i, j):
        return _s__.PairDeque___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _s__.PairDeque___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _s__.PairDeque___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _s__.PairDeque___delitem__(self, *args)

    def __getitem__(self, *args):
        return _s__.PairDeque___getitem__(self, *args)

    def __setitem__(self, *args):
        return _s__.PairDeque___setitem__(self, *args)

    def pop(self):
        return _s__.PairDeque_pop(self)

    def append(self, x):
        return _s__.PairDeque_append(self, x)

    def empty(self):
        return _s__.PairDeque_empty(self)

    def size(self):
        return _s__.PairDeque_size(self)

    def swap(self, v):
        return _s__.PairDeque_swap(self, v)

    def begin(self):
        return _s__.PairDeque_begin(self)

    def end(self):
        return _s__.PairDeque_end(self)

    def rbegin(self):
        return _s__.PairDeque_rbegin(self)

    def rend(self):
        return _s__.PairDeque_rend(self)

    def clear(self):
        return _s__.PairDeque_clear(self)

    def get_allocator(self):
        return _s__.PairDeque_get_allocator(self)

    def pop_back(self):
        return _s__.PairDeque_pop_back(self)

    def erase(self, *args):
        return _s__.PairDeque_erase(self, *args)

    def __init__(self, *args):
        this = _s__.new_PairDeque(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _s__.PairDeque_push_back(self, x)

    def front(self):
        return _s__.PairDeque_front(self)

    def back(self):
        return _s__.PairDeque_back(self)

    def assign(self, n, x):
        return _s__.PairDeque_assign(self, n, x)

    def resize(self, *args):
        return _s__.PairDeque_resize(self, *args)

    def insert(self, *args):
        return _s__.PairDeque_insert(self, *args)

    def pop_front(self):
        return _s__.PairDeque_pop_front(self)

    def push_front(self, x):
        return _s__.PairDeque_push_front(self, x)
    __swig_destroy__ = _s__.delete_PairDeque
    __del__ = lambda self: None
PairDeque_swigregister = _s__.PairDeque_swigregister
PairDeque_swigregister(PairDeque)

class StopIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StopIterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _s__.new_StopIterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _s__.delete_StopIterator
    __del__ = lambda self: None
StopIterator_swigregister = _s__.StopIterator_swigregister
StopIterator_swigregister(StopIterator)

class WaveIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WaveIterator, name)
    __repr__ = _swig_repr

    def __init__(self, _cur, _end):
        this = _s__.new_WaveIterator(_cur, _end)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _s__.WaveIterator___iter__(self)
    __swig_setmethods__["cur"] = _s__.WaveIterator_cur_set
    __swig_getmethods__["cur"] = _s__.WaveIterator_cur_get
    if _newclass:
        cur = _swig_property(_s__.WaveIterator_cur_get, _s__.WaveIterator_cur_set)
    __swig_setmethods__["end"] = _s__.WaveIterator_end_set
    __swig_getmethods__["end"] = _s__.WaveIterator_end_get
    if _newclass:
        end = _swig_property(_s__.WaveIterator_end_get, _s__.WaveIterator_end_set)

    def __next__(self):
        return _s__.WaveIterator___next__(self)

    def next(self):
        return _s__.WaveIterator_next(self)
    __swig_destroy__ = _s__.delete_WaveIterator
    __del__ = lambda self: None
WaveIterator_swigregister = _s__.WaveIterator_swigregister
WaveIterator_swigregister(WaveIterator)

class WAVE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WAVE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WAVE, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _s__.new_WAVE(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _s__.delete_WAVE
    __del__ = lambda self: None

    def set_delay(self, d):
        return _s__.WAVE_set_delay(self, d)

    def initialize(self):
        return _s__.WAVE_initialize(self)

    def push(self, t, v):
        return _s__.WAVE_push(self, t, v)

    def v_out(self, t):
        return _s__.WAVE_v_out(self, t)

    def v_reflect(self, t, v_total):
        return _s__.WAVE_v_reflect(self, t, v_total)

    def __iadd__(self, *args):
        return _s__.WAVE___iadd__(self, *args)

    def __imul__(self, *args):
        return _s__.WAVE___imul__(self, *args)

    def begin(self):
        return _s__.WAVE_begin(self)

    def end(self):
        return _s__.WAVE_end(self)

    def __iter__(self):
        return _s__.WAVE___iter__(self)
WAVE_swigregister = _s__.WAVE_swigregister
WAVE_swigregister(WAVE)

class CKT_BASE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CKT_BASE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CKT_BASE, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        find_wave = staticmethod(_s__.CKT_BASE_find_wave)
    else:
        find_wave = _s__.CKT_BASE_find_wave
CKT_BASE_swigregister = _s__.CKT_BASE_swigregister
CKT_BASE_swigregister(CKT_BASE)

def CKT_BASE_find_wave(arg2):
    return _s__.CKT_BASE_find_wave(arg2)
CKT_BASE_find_wave = _s__.CKT_BASE_find_wave

class CMD(CKT_BASE):
    __swig_setmethods__ = {}
    for _s in [CKT_BASE]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMD, name, value)
    __swig_getmethods__ = {}
    for _s in [CKT_BASE]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMD, name)
    __repr__ = _swig_repr

    def value_name(self):
        return _s__.CMD_value_name(self)

    def do_it(self, arg0, arg1):
        return _s__.CMD_do_it(self, arg0, arg1)
    __swig_destroy__ = _s__.delete_CMD
    __del__ = lambda self: None
    if _newclass:
        cmdproc = staticmethod(_s__.CMD_cmdproc)
    else:
        cmdproc = _s__.CMD_cmdproc
    if _newclass:
        command = staticmethod(_s__.CMD_command)
    else:
        command = _s__.CMD_command

    def __init__(self):
        if self.__class__ == CMD:
            _self = None
        else:
            _self = self
        this = _s__.new_CMD(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _s__.disown_CMD(self)
        return weakref_proxy(self)
CMD_swigregister = _s__.CMD_swigregister
CMD_swigregister(CMD)

def CMD_cmdproc(arg2, arg3):
    return _s__.CMD_cmdproc(arg2, arg3)
CMD_cmdproc = _s__.CMD_cmdproc

def CMD_command(arg2, arg3):
    return _s__.CMD_command(arg2, arg3)
CMD_command = _s__.CMD_command

class SIM(CMD):
    __swig_setmethods__ = {}
    for _s in [CMD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIM, name, value)
    __swig_getmethods__ = {}
    for _s in [CMD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SIM, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == SIM:
            _self = None
        else:
            _self = self
        this = _s__.new_SIM(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _s__.delete_SIM
    __del__ = lambda self: None

    def setup(self, arg0):
        return _s__.SIM_setup(self, arg0)

    def sweep(self):
        return _s__.SIM_sweep(self)

    def outdata(self, arg0, arg1):
        return _s__.SIM_outdata(self, arg0, arg1)

    def head(self, arg0, arg1, arg2):
        return _s__.SIM_head(self, arg0, arg1, arg2)

    def print_results(self, arg0):
        return _s__.SIM_print_results(self, arg0)

    def alarm(self):
        return _s__.SIM_alarm(self)

    def store_results(self, arg0):
        return _s__.SIM_store_results(self, arg0)

    def advance_time(self):
        return _s__.SIM_advance_time(self)

    def sim_(self):
        return _s__.SIM_sim_(self)
    def __disown__(self):
        self.this.disown()
        _s__.disown_SIM(self)
        return weakref_proxy(self)
SIM_swigregister = _s__.SIM_swigregister
SIM_swigregister(SIM)

class SIM_(SIM):
    __swig_setmethods__ = {}
    for _s in [SIM]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIM_, name, value)
    __swig_getmethods__ = {}
    for _s in [SIM]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SIM_, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == SIM_:
            _self = None
        else:
            _self = self
        this = _s__.new_SIM_(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setup(self, arg0):
        return _s__.SIM__setup(self, arg0)

    def sweep(self):
        return _s__.SIM__sweep(self)

    def do_it(self, arg0, arg1):
        return _s__.SIM__do_it(self, arg0, arg1)

    def outdata(self, d, i):
        return _s__.SIM__outdata(self, d, i)

    def head(self, a, b, s):
        return _s__.SIM__head(self, a, b, s)

    def solve(self, a, b):
        return _s__.SIM__solve(self, a, b)

    def solve_with_homotopy(self, a, b):
        return _s__.SIM__solve_with_homotopy(self, a, b)
    def __disown__(self):
        self.this.disown()
        _s__.disown_SIM_(self)
        return weakref_proxy(self)

    def print_results(self, arg0):
        return _s__.SIM__print_results(self, arg0)

    def alarm(self):
        return _s__.SIM__alarm(self)

    def store_results(self, arg0):
        return _s__.SIM__store_results(self, arg0)
SIM__swigregister = _s__.SIM__swigregister
SIM__swigregister(SIM_)

# This file is compatible with both classic and new-style classes.


